// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: deployments.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeploymentsServiceClient is the client API for DeploymentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentsServiceClient interface {
	ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*DeploymentsReplicaConfigs, error)
	GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error)
	SetDeployment(ctx context.Context, in *DeploymentsReplicaConfig, opts ...grpc.CallOption) (*SetDeploymentResponse, error)
}

type deploymentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentsServiceClient(cc grpc.ClientConnInterface) DeploymentsServiceClient {
	return &deploymentsServiceClient{cc}
}

func (c *deploymentsServiceClient) ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*DeploymentsReplicaConfigs, error) {
	out := new(DeploymentsReplicaConfigs)
	err := c.cc.Invoke(ctx, "/proto.DeploymentsService/ListDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsServiceClient) GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error) {
	out := new(GetDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DeploymentsService/GetDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsServiceClient) SetDeployment(ctx context.Context, in *DeploymentsReplicaConfig, opts ...grpc.CallOption) (*SetDeploymentResponse, error) {
	out := new(SetDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.DeploymentsService/SetDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentsServiceServer is the server API for DeploymentsService service.
// All implementations must embed UnimplementedDeploymentsServiceServer
// for forward compatibility
type DeploymentsServiceServer interface {
	ListDeployments(context.Context, *ListDeploymentsRequest) (*DeploymentsReplicaConfigs, error)
	GetDeployment(context.Context, *GetDeploymentRequest) (*GetDeploymentResponse, error)
	SetDeployment(context.Context, *DeploymentsReplicaConfig) (*SetDeploymentResponse, error)
	mustEmbedUnimplementedDeploymentsServiceServer()
}

// UnimplementedDeploymentsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeploymentsServiceServer struct {
}

func (UnimplementedDeploymentsServiceServer) ListDeployments(context.Context, *ListDeploymentsRequest) (*DeploymentsReplicaConfigs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (UnimplementedDeploymentsServiceServer) GetDeployment(context.Context, *GetDeploymentRequest) (*GetDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedDeploymentsServiceServer) SetDeployment(context.Context, *DeploymentsReplicaConfig) (*SetDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeployment not implemented")
}
func (UnimplementedDeploymentsServiceServer) mustEmbedUnimplementedDeploymentsServiceServer() {}

// UnsafeDeploymentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentsServiceServer will
// result in compilation errors.
type UnsafeDeploymentsServiceServer interface {
	mustEmbedUnimplementedDeploymentsServiceServer()
}

func RegisterDeploymentsServiceServer(s grpc.ServiceRegistrar, srv DeploymentsServiceServer) {
	s.RegisterService(&DeploymentsService_ServiceDesc, srv)
}

func _DeploymentsService_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServiceServer).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DeploymentsService/ListDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServiceServer).ListDeployments(ctx, req.(*ListDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentsService_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServiceServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DeploymentsService/GetDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServiceServer).GetDeployment(ctx, req.(*GetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentsService_SetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentsReplicaConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServiceServer).SetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DeploymentsService/SetDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServiceServer).SetDeployment(ctx, req.(*DeploymentsReplicaConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// DeploymentsService_ServiceDesc is the grpc.ServiceDesc for DeploymentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeploymentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DeploymentsService",
	HandlerType: (*DeploymentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDeployments",
			Handler:    _DeploymentsService_ListDeployments_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _DeploymentsService_GetDeployment_Handler,
		},
		{
			MethodName: "SetDeployment",
			Handler:    _DeploymentsService_SetDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deployments.proto",
}
